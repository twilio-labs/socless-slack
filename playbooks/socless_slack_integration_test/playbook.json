{
    "Playbook": "SoclessSlackIntegrationTest",
    "Comment": "Test all socless-slack lambda functions",
    "StartAt": "Send_Message_To_Channel",
    "States": {
        "Send_Message_To_Channel": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.SendMessage.name}}",
            "Parameters": {
                "target": "$.artifacts.event.details.existing_channel_name",
                "target_type": "channel",
                "message_template": "Beginning SoclessSlackIntegrationTest in ${AWS::Region}"
            },
            "Next": "Wait_A"
        },
        "Wait_A": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "Set_Channel_Topic_using_Runtime_Secrets"
        },
        "Set_Channel_Topic_using_Runtime_Secrets": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.SetChannelTopic.name}}",
            "Parameters": {
                "channel_id": "$.results.Send_Message_To_Channel.slack_id",
                "topic": "set the channel topic: Our dev/null channel, you should probably mute this. Good for writing automated tests that post to Slack",
                "token": "{{env('TSIRT_TOKEN')}}"
            },
            "Next": "Wait_B"
        },
        "Wait_B": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "Find_User_via_Username"
        },
        "Find_User_via_Username": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.FindUser.name}}",
            "Parameters": {
                "username": "$.artifacts.event.details.username_target"
            },
            "Next": "Was_User_Found_via_Username"
        },
        "Was_User_Found_via_Username": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.results.result",
                    "StringEquals": "true",
                    "Next": "Find_User_via_Slack_ID"
                },
                {
                    "Variable": "$.results.result",
                    "StringEquals": "false",
                    "Next": "FAILED_TEST"
                }
            ]
        },
        "Find_User_via_Slack_ID": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.FindUser.name}}",
            "Parameters": {
                "slack_id": "$.results.Find_User_via_Username.id"
            },
            "Next": "Was_User_Found_via_Slack_ID"
        },
        "Was_User_Found_via_Slack_ID": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.results.result",
                    "StringEquals": "true",
                    "Next": "Check_User_In_Channel"
                },
                {
                    "Variable": "$.results.result",
                    "StringEquals": "false",
                    "Next": "FAILED_TEST"
                }
            ]
        },
        "Check_User_In_Channel": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.CheckIfUserInChannel.name}}",
            "Parameters": {
                "target_channel_id": "$.results.Send_Message_To_Channel.slack_id",
                "user_id": "$.results.Find_User_via_Slack_ID.id"
            },
            "Next": "Was_User_In_Channel"
        },
        "Was_User_In_Channel": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.results.ok",
                    "BooleanEquals": true,
                    "Next": "Send_Message_DM"
                },
                {
                    "Variable": "$.results.result",
                    "BooleanEquals": false,
                    "Next": "FAILED_TEST"
                }
            ]
        },
        "Send_Message_DM": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.SendMessage.name}}",
            "Parameters": {
                "target": "$.artifacts.event.details.username_target",
                "target_type": "user",
                "message_template": "Hello from SoclessSlackIntegrationTest in ${AWS::Region}"
            },
            "Next": "Wait_C"
        },
        "Wait_C": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "Upload_File"
        },
        "Upload_File": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.UploadFile.name}}",
            "Parameters": {
                "target": "$.artifacts.event.details.existing_channel_name",
                "target_type": "channel",
                "content": "Hello from SoclessSlackIntegrationTest in ${AWS::Region}",
                "filename": "testfilename.txt",
                "title": "testtitle",
                "initial_comment": "testing file upload:"
            },
            "Next": "Prompt_For_Confirmation"
        },
        "Prompt_For_Confirmation": {
            "Type": "Interaction",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.PromptForConfirmation.name}}",
            "Parameters": {
                "prompt_text": "Tesing PromptForConfirmation",
                "text": "This will timeout in 30 seconds and advance to next step in test",
                "target": "$.artifacts.event.details.existing_channel_id",
                "target_type": "slack_id"
            },
            "TimeoutSeconds": 40,
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.Timeout"
                    ],
                    "ResultPath": "$.errors.Prompt_For_Confirmation",
                    "Next": "Wait_D"
                }
            ],
            "Next": "Wait_D"
        },
        "Wait_D": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "Prompt_For_Response"
        },
        "Prompt_For_Response": {
            "Type": "Interaction",
            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${{self:functions.PromptForResponse.name}}",
            "Parameters": {
                "message_template": "Testing PromptForConfirmation \n This will timeout in 30 seconds and advance to next step in test",
                "target": "$.artifacts.event.details.existing_channel_id",
                "target_type": "slack_id",
                "response_desc": "mm-dd-yyyy"
            },
            "TimeoutSeconds": 40,
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.Timeout"
                    ],
                    "ResultPath": "$.errors.Slack_User_For_Return_Date",
                    "Next": "Close_Investigation"
                }
            ],
            "Next": "Close_Investigation"
        },
        "FAILED_TEST": {
            "Type": "Fail"
        },
        "Close_Investigation": {
            "Type": "Task",
            "Resource": "${{self:custom.core.SetInvestigationStatus}}",
            "Parameters": {
                "investigation_id": "$.artifacts.event.investigation_id",
                "status": "closed"
            },
            "End": true
        }
    }
}